// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String    @default("USER")
  approved         Boolean   @default(false)
  phoneNumber      String?
  region           String?
  organizationName String?
  accounts         Account[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  supplies         Supply[]
  serviceVisits    ServiceVisit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id               String         @id @default(cuid())
  name             String
  shortCode        String
  description      String?
  testConfiguration Json?
  machineModels    MachineModel[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model MachineModel {
  id                   String    @id @default(cuid())
  name                 String
  shortCode            String
  description          String?
  warrantyPeriodMonths Int
  coverImageUrl        String?
  machines             Machine[]
  categoryId           String
  category             Category  @relation(fields: [categoryId], references: [id])
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Machine {
  id                  String           @id @default(cuid())
  serialNumber        String
  machineModelId      String
  machineModel        MachineModel     @relation(fields: [machineModelId], references: [id])
  manufacturingDate   DateTime
  testResultData      Json
  testAdditionalNotes String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  supplyId            String?
  supply              Supply?
  returnId            String?
  return              Return?
  saleId              String?
  sale                Sale?
  serviceRequests     ServiceRequest[]
  warrantyCertificate WarrantyCertificate?
}

model Supply {
  id            String   @id @default(cuid())
  machineId     String   @unique
  machine       Machine? @relation(fields: [machineId], references: [id])
  supplyDate    DateTime @default(now())
  sellBy        DateTime // by default 6 month from supply date
  distributorId String
  distributor   User     @relation(fields: [distributorId], references: [id])
  notes         String?  @default("") @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Return {
  id           String   @id @default(cuid())
  machineId    String   @unique
  machine      Machine  @relation(fields: [machineId], references: [id])
  returnDate   DateTime
  returnReason String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Sale {
  id                  String   @id @default(cuid())
  machineId           String   @unique
  machine             Machine  @relation(fields: [machineId], references: [id])
  saleDate            DateTime
  customerName        String
  customerPhoneNumber String
  customerAddress     String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model ServiceRequest {
  id             String        @id @default(cuid())
  machineId      String
  machine        Machine       @relation(fields: [machineId], references: [id])
  serviceVisitId String?       @unique
  serviceVisit   ServiceVisit?
  complaint      String?
  attachments    Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ServiceRequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  CLOSED // Can only be closed by customer service
}

model ServiceVisit {
  id                String                @id @default(cuid())
  serviceRequestId  String                @unique
  serviceRequest    ServiceRequest        @relation(fields: [serviceRequestId], references: [id])
  serviceVisitDate  DateTime
  serviceVisitNotes String?
  status            ServiceRequestStatus  @default(PENDING)
  comments          ServiceVisitComment[]
  engineerId        String?
  engineer          User?                 @relation(fields: [engineerId], references: [id])
  totalCost         Float?
  typeOfIssue       String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model ServiceVisitComment {
  id             String       @id @default(cuid())
  serviceVisitId String
  serviceVisit   ServiceVisit @relation(fields: [serviceVisitId], references: [id])
  comment        String
  attachments    Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model WarrantyCertificate {
  id String @id @default(cuid())
  machineId String @unique
  machine Machine @relation(fields: [machineId], references: [id])
  name String
  address String
  state String
  zipCode String
  country String @default("India")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}